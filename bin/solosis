#!/software/cellgen/team298/shared/envs/hlb-conda/hl_minimal_v1.0.0/bin/python
# Path is hard coded to avoid conflicts between the user defined python exec and this
# @vm11,@lg28,@db29
# Date created: Mon  5 Aug 14:42:55 BST 2024
# Date modified: Fri 30 Aug 15:46:45 BST 2024

import os
import subprocess

import click
import cmdbase
from cmdbase import helpers

#### GLOBAL DEFS ####

try:
    SHELL_SCRIPT_BASE = os.environ["SHELL_SCRIPT_BASE"]
except KeyError:
    print(
        "No user defined env var SHELL_SCRIPT_BASE. Using global def for script base folder"
    )
    SHELL_SCRIPT_BASE = "/software/cellgen/team298/shared/hlpiper_v1.0.0/bin/workflows"


VERSION = "1.0.0"
CWD = os.getcwd()  # Current Working dir
USER = os.environ["USER"]
LOCAL_HIST = ".pap/hist"
GLOBAL_DIR = os.path.join(os.environ["HOME"], ".pap")
GLOBAL_HIST = os.path.join(GLOBAL_DIR, "hist")
RUN_TOKEN = (
    helpers.generate_token()
)  # Create a random id whenever the script is invoked. For history registration

# export for other subfunctions
os.environ["SHELL_SCRIPT_BASE"] = SHELL_SCRIPT_BASE
os.environ["GLOBAL_DIR"] = GLOBAL_DIR
os.environ["GLOBAL_HIST"] = GLOBAL_HIST
os.environ["LOCAL_HIST"] = LOCAL_HIST
os.environ["VERSION"] = VERSION
os.environ["RUN_TOKEN"] = RUN_TOKEN
os.environ["CWD"] = CWD
#### Create options that can common to all ####


@click.group(context_settings={"show_default": True})
def cli():
    """
    Command line suite for HaniffaLab
    version 1.0.0
    """
    pass


@cli.group()
@helpers.history
def irods():
    """
    Interacting with irods
    Set of commands for interacting with irods
    Please note that you have `iinit` before running these commands
    """
    pass


@cli.group()
@helpers.history
def test():
    """
    testing for development.
    this will be group name.
    """
    pass


@cli.group()
@helpers.history
def rna():
    """
    scRNAseq analysis suite
    Set of commands for analysing scRNA-seq data including:
    alignment, demultiplexing, removal of ambient RNA & doublets.
    """
    pass


@cli.group()
@helpers.history
def alignment():
    """
    Align fastq to genome
    Set of commands for alignment tools.
    """
    pass


################ irods commands ################


#### Test and devel


@click.command()
@helpers.farm
@click.option(
    "--user_params",
    required=False,
    help="WITHIN QUOTES specify anything to be passed to cmd",
)
def argtest(user_params, **kwargs):
    shell_script = os.path.join(SHELL_SCRIPT_BASE, "test..args")
    print(SHELL_SCRIPT_BASE)
    # result = subprocess.run([shell_script, samplefile, retainbam, overwrite], capture_output=True, text=True)
    result = subprocess.run(
        [shell_script, "hello", user_params], capture_output=True, text=True
    )
    click.echo(result)
    click.echo(result.stdout)
    click.echo(result.stderr)


####

################# basic commands ###########
cli.add_command(cmdbase.basic.history)


################ irods commands ################
irods.add_command(cmdbase.irods.pull_processed)
irods.add_command(cmdbase.irods.pull_fastqs)

################# scrna seq analysis commands ##
rna.add_command(cmdbase.rna.cellbender)
rna.add_command(cmdbase.rna.scanpyrun)
rna.add_command(cmdbase.rna.merge_h5ad)

################# alignment commands ###########
alignment.add_command(cmdbase.alignment.cellranger)
alignment.add_command(cmdbase.alignment.starsolo)

############### test commands ###################
test.add_command(argtest)

if __name__ == "__main__":
    CWD = helpers.create_env()
    cli()
