#!/software/cellgen/team298/shared/envs/hlb-conda/hl_minimal_v1.0.0/bin/python
# Path is hard coded to avoid conflicts between the user defined python exec and this
# @vm11,@lg28,@db29
# Date created: Mon  5 Aug 14:42:55 BST 2024
# Date modified: Fri 30 Aug 15:46:45 BST 2024


import click
import subprocess
import os
import functools 
from pathlib import Path
from cmdbase import helpers 
import pandas as pd
import functools
#from cmdbase import irods
import cmdbase
from datetime import datetime

#### GLOBAL DEFS ####


try:
    SHELL_SCRIPT_BASE = os.environ['SHELL_SCRIPT_BASE']
except KeyError:
    print("No user defined env var SHELL_SCRIPT_BASE. Using global def for script base folder")
    SHELL_SCRIPT_BASE = "/software/cellgen/team298/shared/hlpiper_v1.0.0/bin/workflows"


VERSION="1.0.0"
CWD = os.getcwd() # Current Working dir
USER = os.environ['USER']
LOCAL_HIST=".pap/hist"
GLOBAL_DIR=os.path.join(os.environ['HOME'],".pap")
GLOBAL_HIST=os.path.join(GLOBAL_DIR, "hist")
RUN_TOKEN = helpers.generate_token() # Create a random id whenever the script is invoked. For history registration

# export for other subfunctions
os.environ['SHELL_SCRIPT_BASE'] = SHELL_SCRIPT_BASE
os.environ['GLOBAL_DIR'] = GLOBAL_DIR
os.environ['GLOBAL_HIST'] = GLOBAL_HIST
os.environ['LOCAL_HIST'] = LOCAL_HIST
os.environ['VERSION'] = VERSION
os.environ['RUN_TOKEN'] = RUN_TOKEN
#### Create options that can common to all ####


@click.group()
def cli():
    """
    Command line suite for HaniffaLab
    version 1.0.0
    """
    pass


@cli.group()
@helpers.history
def irods():
    """
    Set of commands for interacting with irods
    Please note that you have `iinit` before running these commands
    """
    pass


@cli.group()
@helpers.history
def test():
    """
    testing for development.
    this will be group name.
    """
    pass

@click.command()
@helpers.farm
def farmtest(*args,**kwargs):
    click.echo(f"{kwargs}")


@cli.group()
@helpers.history
def rna():
    """
    Set of commands for analysing scRNA-seq data including:
    alignment, demultiplexing, removal of ambient RNA & doublets.
    """
    pass

@cli.group()
@helpers.history
def alignment():
    """
    Set of commands for seq data alignment.
    """
    pass

################ irods commands ################
irods.add_command(cmdbase.irods.pull_processed)
irods.add_command(cmdbase.irods.pull_fastqs)

################### scrna seq analysis commands ###################
rna.add_command(cmdbase.rna.cellbender)

################# alignment commands ###################
alignment.add_command(cmdbase.alignment.cellranger)
alignment.add_command(cmdbase.alignment.starsolo)

############### test commands ###################
test.add_command(farmtest)

if __name__ == "__main__":
    CWD = helpers.create_env()
    print(GLOBAL_HIST)
    cli()
