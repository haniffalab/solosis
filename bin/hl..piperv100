#!/software/cellgen/team298/shared/envs/hlb-conda/hl_minimal_v1.0.0/bin/python
# Path is hard coded to avoid conflicts between the user defined python exec and this
# @vm11,@lg28,@db29
# Date created: Mon  5 Aug 14:42:55 BST 2024
# Date modified: Fri 30 Aug 15:46:45 BST 2024


import click
import subprocess
import os
import functools 
from pathlib import Path
from cmdbase import helpers 
import pandas as pd
import functools
#from cmdbase import irods
import cmdbase
from datetime import datetime

#### GLOBAL DEFS ####

VERSION="1.0.0"

try:
    SHELL_SCRIPT_BASE = os.environ['SHELL_SCRIPT_BASE']
except KeyError:
    print("No user defined env var SHELL_SCRIPT_BASE. Using global def for script base folder")
    SHELL_SCRIPT_BASE = "/software/cellgen/team298/shared/hlpiper_v1.0.0/bin/workflows"


CWD = os.getcwd() # Current Working dir
USER = os.environ['USER']
LOCAL_HIST=".pap/hist"
GLOBAL_DIR=os.path.join(os.environ['HOME'],".pap")
GLOBAL_HIST=os.path.join(GLOBAL_DIR, "hist")

os.environ['SHELL_SCRIPT_BASE'] = SHELL_SCRIPT_BASE

#### Create options that can common to all ####

#cmd_test = [click.option("--farm")]

def create_env():
    CWD = os.getcwd() # Current Working dir
    Path(".pap/lsf/").mkdir(parents=True, exist_ok=True)
    Path(".pap/scripts/").mkdir(parents=True, exist_ok=True)
    Path(GLOBAL_DIR+"/lsf/").mkdir(parents=True, exist_ok=True)
    Path(GLOBAL_DIR+"/scripts/").mkdir(parents=True, exist_ok=True)
    return CWD


def hist(func):
    """
    A decorator for creating history each time the command is successfully invoked
    """
    @functools.wraps(func)  # Ensures the original function name is registered by click instead of registering wrapper
    def wrapper(*args, **kwargs):
        #print(f"Invocation token: {RUN_TOKEN}")
        #print("----------------------------")
        result = func(*args, **kwargs)

        # history items
        func_name = func.__name__
        invoke_time =  datetime.now().strftime("%d/%m/%y, %H:%M:%S")
        x = " ,".join([ str(k) + ":" + str(v) for k,v in kwargs.items() ])
        h = pd.DataFrame({"func_name": func_name, 
                          "time": invoke_time, 
                          "username": USER,
                          "version": VERSION,
                          "cwd": CWD,
                          "args": x}, index = [RUN_TOKEN])
        h.to_csv(LOCAL_HIST, mode='a', header=not os.path.exists(LOCAL_HIST))
        h.to_csv(GLOBAL_HIST, mode='a', header=not os.path.exists(GLOBAL_HIST))
        return result
    return wrapper


def farm_options(func):

    @click.option("--mem")
    @click.option("--ncores")
    @click.option("--nprocs")
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        return func(*args, **kwargs)

    return wrapper


@click.group()
def cli():
    """
    Command line suite for HaniffaLab
    version 1.0.0
    """
    pass


@cli.group()
@hist
def irods():
    """
    Set of commands for interacting with irods
    Please note that you have `iinit` before running these commands
    """
    pass


@cli.group()
# @hist
def test():
    """
    testing for development.
    this will be group name.
    """
    pass

@cli.group()
def scRNA_analysis():
    """
    Set of commands for analysing scRNA-seq data including:
    alignment, demultiplexing, removal of ambient RNA & doublets.
    """
    pass

@cli.group()
def alignment():
    """
    Set of commands for seq data alignment.
    """
    pass

################ irods commands ################
irods.add_command(cmdbase.irods.pull_processed)
irods.add_command(cmdbase.irods.pull_fastqs)
############### test commands ###################


@test.command()
@click.option("--x")
@farm_options
@hist
def test_hist(x, *args, **kwargs):
    print(x)
    return x


@test.command()
@click.option(
    "--total_droplets_included", required=True, help="total_droplets_included"
)
def cellbender(total_droplets_included, **kwargs):
    """
    Cellbender Removes droplets and ambient RNA from scRNA seq data. \n
    --------------------------------- \n
        [ C E L L B E N D E R]

    Cellbender Removes droplets and ambient RNA from scRNA seq data.
    Version:0.3.0.

    sample_ID: list of samples, CSV file format needed and header as 'samples'
    ---------------------------------
    """
    shell_cellbender_script = os.path.join(
        SHELL_SCRIPT_BASE, "test..submit_cellbender"
    )  # can we change script base to sc-voyage dir?
    result_CB = subprocess.run(
        [shell_cellbender_script, total_droplets_included],
        capture_output=True,
        text=True,
    )
    click.echo(result_CB.stdout)


@test.command()
def cellranger():
    """
    Cellranger aligns sc-rna seq reads...
    --------------------------------- \n
        [ C E L L R A N G E R]

    Cellranger sample demultiplexing, barcode processing, single cell 3' & 5' gene counting, V(D)J transcript sequence assembly & annotation, and Feature Barcode analysis from single cell data.
    Version:7.2.0.

    sample_ID: list of samples, CSV file format needed and header as 'samples'
    ---------------------------------
    """
    shell_cellranger_script = os.path.join(
        SHELL_SCRIPT_BASE, "test..submit_cellranger"
    )  # can we change script base to sc-voyage d>
    result_CR = subprocess.run(
        [shell_cellranger_script], capture_output=True, text=True
    )
    click.echo(result_CR.stdout)

################### scrna seq analysis commands ###################

@scRNA_analysis.command()
@click.option('--total_droplets_included', required=True, help="total_droplets_included")
def cellbender(total_droplets_included, **kwargs):
    """
    Cellbender Removes droplets and ambient RNA from scRNA seq data. \n
    --------------------------------- \n
        [ C E L L B E N D E R]  

    Cellbender Removes droplets and ambient RNA from scRNA seq data.  
    Version:0.3.0.
   
    sample_ID: list of samples, CSV file format needed and header as 'samples'
    ---------------------------------
    """
    shell_cellbender_script=os.path.join(SHELL_SCRIPT_BASE,"test..submit_cellbender") #can we change script base to sc-voyage d>
    result_CB = subprocess.run([shell_cellbender_script, total_droplets_included], capture_output=True, text=True)
    click.echo(result_CB.stdout)

################# alignment commands ###################

@alignment.command()
def cellranger():
    """
    Cellranger aligns sc-rna seq reads...  
    --------------------------------- \n
        [ C E L L R A N G E R]  

    Cellranger sample demultiplexing, barcode processing, single cell 3' & 5' gene counting, V(D)J transcript sequence assembly>
    Version:7.2.0.
   
    sample_ID: list of samples, CSV file format needed and header as 'samples'
    ---------------------------------
    """
    shell_cellranger_script=os.path.join(SHELL_SCRIPT_BASE,"test..submit_cellranger") #can we change script base to sc-voyage d>
    result_CR = subprocess.run([shell_cellranger_script], capture_output=True, text=True)
    click.echo(result_CR.stdout)


@alignment.command()
def starsolo():
    """
    STARsolo aligns sc-rna seq reads...  
    --------------------------------- \n
        [ S T A R S O L O ]  

    STARsolo ...
    Version:2.7.11b   
   
    sample_ID: list of samples, CSV file format needed and header as 'samples'
    ---------------------------------
    """
    shell_starsolo_script=os.path.join(SHELL_SCRIPT_BASE,"alignment..submit_starsolo") #can we change script base to sc-voyage dir
    result_STAR = subprocess.run([shell_starsolo_script], capture_output=True, text=True)
    click.echo(result_STAR.stdout)

####



if __name__ == "__main__":
    RUN_TOKEN = helpers.generate_random_name() # Create a random id whenever the script is invoked. For history registration
    CWD = create_env()
    cli()
