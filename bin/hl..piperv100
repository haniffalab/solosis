#!/software/cellgen/team298/shared/envs/hlb-conda/hl_minimal_v1.0.0/bin/python
# Path is hard coded to avoid conflicts between the user defined python exec and this
# @vm11
# Date created: Mon  5 Aug 14:42:55 BST 2024
# Date modified: Mon 19 Aug 11:40:23 BST 2024


import click
import subprocess
import os
import functools 
from pathlib import Path
from cmdbase import helpers 
SHELL_SCRIPT_BASE="/lustre/scratch126/cellgen/team298/soft/hlpiper_v1.0.0/bin/workflows"
import functools
from cmdbase import helpers

SHELL_SCRIPT_BASE = "/software/cellgen/team298/shared/hlpiper_v1.0.0/bin/workflows"


#### Create options that can common to all ####

cmd_test = [click.option("--farm")]


def hist(func):
    @functools.wraps(
        func
    )  # Ensures the original function name is registered by click instead of registering wrapper
    def wrapper(*args, **kwargs):
        print(rn)
        print(f"kwargs of {func.__name__} : {kwargs}")
        result = func(*args, **kwargs)
        return result

    return wrapper


def farm_options(func):

    @click.option("--mem")
    @click.option("--ncores")
    @click.option("--nprocs")
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        return func(*args, **kwargs)

    return wrapper


@click.group()
def cli():
    """
    Command line suite for HaniffaLab
    version 1.0.0
    """
    pass


@cli.group()
def irods():
    """
    Set of commands for interacting with irods
    Please note that you have `iinit` before running these commands
    """
    pass


@cli.group()
# @hist
def test():
    """
    testing for development.
    this will be group name.
    """
    pass

@cli.group()
def scRNA_analysis():
    """
    Set of commands for analysing scRNA-seq data including:
    alignment, demultiplexing, removal of ambient RNA & doublets.
    """
    pass


@irods.command()
@click.option("--samplefile", required=True, help="Sample file text file")
def download_processed(samplefile):
    """
    Downloads processed irods data or any folder from irods
    and saves it to $HL_IRODS_DOWNLOAD. This is set when you load module
    Requires a sample file.

    -----------------------

    Example: /lustre/scratch126/cellgen/team298/soft/bin/examples/irods_download.txt
    Input file should have 3 mandatory columns
    1st column: sanger_id
    2nd column: sample_name
    LAST column: irods path
    You can have any column in between

    pBCN14844712 BK31_1 /seq/illumina/runs/49/..../cellranger710multi....
    pBCN14844713 BK31_2 /seq/illumina/runs/49/..../cellranger710multi....
    pBCN14844714 BK31_3 /seq/illumina/runs/49/..../cellranger710multi....
    pBCN14844715 BK31_4 /seq/illumina/runs/49/..../cellranger710multi....




    ----------------------

    Suggested way. Open Haniffa sample tracker excel file.
    Copy/paste your project sample rows to a local excel file.
    Remove columns to match required format.

    """
    print("Using irods to download data")
    print("If you have a large set of files, this command will take a while to run")
    shell_script = os.path.join(SHELL_SCRIPT_BASE, "irods..download_processed")
    result = subprocess.run([shell_script, samplefile], capture_output=True, text=True)
    click.echo(result.stdout)
    click.echo(result.stderr)


@test.command()
@click.option("--first_name", required=True, help="First name")
@click.option("--last_name", required=True, help="Last name")
def helloworld(first_name, last_name, **kwargs):
    """
    Doc string will be displayed when help is displayed.
    first_name: first name
    last name: Any thing
    """
    farm = 0
    if farm:
        shell_script = "echo"
        results = subprocess.run(
            [shell_script, '"Hello World"', first_name, last_name],
            capture_output=True,
            text=True,
        )
        print(results)
    else:
        print(f"Hello World.... {first_name} {last_name}")

    return "Hello World"


@test.command()
@click.option("--x")
@farm_options
@hist
def test_hist(x, *args, **kwargs):
    print(x)
    return x


@test.command()
@click.option(
    "--total_droplets_included", required=True, help="total_droplets_included"
)
def cellbender(total_droplets_included, **kwargs):
    """
    Cellbender Removes droplets and ambient RNA from scRNA seq data. \n
    --------------------------------- \n
        [ C E L L B E N D E R]

    Cellbender Removes droplets and ambient RNA from scRNA seq data.
    Version:0.3.0.

    sample_ID: list of samples, CSV file format needed and header as 'samples'
    ---------------------------------
    """
    shell_cellbender_script = os.path.join(
        SHELL_SCRIPT_BASE, "test..submit_cellbender"
    )  # can we change script base to sc-voyage dir?
    result_CB = subprocess.run(
        [shell_cellbender_script, total_droplets_included],
        capture_output=True,
        text=True,
    )
    click.echo(result_CB.stdout)


@test.command()
def cellranger():
    """
    Cellranger aligns sc-rna seq reads...
    --------------------------------- \n
        [ C E L L R A N G E R]

    Cellranger sample demultiplexing, barcode processing, single cell 3' & 5' gene counting, V(D)J transcript sequence assembly & annotation, and Feature Barcode analysis from single cell data.
    Version:7.2.0.

    sample_ID: list of samples, CSV file format needed and header as 'samples'
    ---------------------------------
    """
    shell_cellranger_script = os.path.join(
        SHELL_SCRIPT_BASE, "test..submit_cellranger"
    )  # can we change script base to sc-voyage d>
    result_CR = subprocess.run(
        [shell_cellranger_script], capture_output=True, text=True
    )
    click.echo(result_CR.stdout)


@scRNA_analysis.command()
@click.option('--total_droplets_included', required=True, help="total_droplets_included")
def cellbender(total_droplets_included, **kwargs):
    """
    Cellbender Removes droplets and ambient RNA from scRNA seq data. \n
    --------------------------------- \n
        [ C E L L B E N D E R]  

    Cellbender Removes droplets and ambient RNA from scRNA seq data.  
    Version:0.3.0.
   
    sample_ID: list of samples, CSV file format needed and header as 'samples'
    ---------------------------------
    """
    shell_cellbender_script=os.path.join(SHELL_SCRIPT_BASE,"test..submit_cellbender") #can we change script base to sc-voyage d>
    result_CB = subprocess.run([shell_cellbender_script, total_droplets_included], capture_output=True, text=True)
    click.echo(result_CB.stdout)


@scRNA_analysis.command()
def cellranger():
    """
    Cellranger aligns sc-rna seq reads...  
    --------------------------------- \n
        [ C E L L R A N G E R]  

    Cellranger sample demultiplexing, barcode processing, single cell 3' & 5' gene counting, V(D)J transcript sequence assembly>
    Version:7.2.0.
   
    sample_ID: list of samples, CSV file format needed and header as 'samples'
    ---------------------------------
    """
    shell_cellranger_script=os.path.join(SHELL_SCRIPT_BASE,"test..submit_cellranger") #can we change script base to sc-voyage d>
    result_CR = subprocess.run([shell_cellranger_script], capture_output=True, text=True)
    click.echo(result_CR.stdout)

if __name__ == "__main__":
    
    rn = helpers.generate_random_name() # Create a random id whenever the script is invoked. For history registration
    Path(".pap/lsf/").mkdir(parents=True, exist_ok=True)
    Path(".pap/scripts/").mkdir(parents=True, exist_ok=True)
    cli()
