#!/software/cellgen/team298/shared/envs/hlb-conda/hl_minimal_v1.0.0/bin/python
# Path is hard coded to avoid conflicts between the user defined python exec and this
# @vm11,@lg28,@db29
# Date created: Mon  5 Aug 14:42:55 BST 2024
# Date modified: Fri 30 Aug 15:46:45 BST 2024


import click
import subprocess
import os
import functools 
from pathlib import Path
from cmdbase import helpers 
import pandas as pd
import functools
#from cmdbase import irods
import cmdbase
from datetime import datetime

#### GLOBAL DEFS ####

VERSION="1.0.0"

try:
    SHELL_SCRIPT_BASE = os.environ['SHELL_SCRIPT_BASE']
except KeyError:
    print("No user defined env var SHELL_SCRIPT_BASE. Using global def for script base folder")
    SHELL_SCRIPT_BASE = "/software/cellgen/team298/shared/hlpiper_v1.0.0/bin/workflows"


CWD = os.getcwd() # Current Working dir
USER = os.environ['USER']
LOCAL_HIST=".pap/hist"
GLOBAL_DIR=os.path.join(os.environ['HOME'],".pap")
GLOBAL_HIST=os.path.join(GLOBAL_DIR, "hist")

os.environ['SHELL_SCRIPT_BASE'] = SHELL_SCRIPT_BASE
os.environ['GLOBAL_DIR'] = GLOBAL_DIR

#### Create options that can common to all ####


def hist(func):
    """
    A decorator for creating history each time the command is successfully invoked
    """
    @functools.wraps(func)  # Ensures the original function name is registered by click instead of registering wrapper
    def wrapper(*args, **kwargs):
        #print(f"Invocation token: {RUN_TOKEN}")
        #print("----------------------------")
        result = func(*args, **kwargs)

        # history items
        func_name = func.__name__
        invoke_time =  datetime.now().strftime("%d/%m/%y, %H:%M:%S")
        x = " ,".join([ str(k) + ":" + str(v) for k,v in kwargs.items() ])
        h = pd.DataFrame({"func_name": func_name, 
                          "time": invoke_time, 
                          "username": USER,
                          "version": VERSION,
                          "cwd": CWD,
                          "args": x}, index = [RUN_TOKEN])
        h.to_csv(LOCAL_HIST, mode='a', header=not os.path.exists(LOCAL_HIST))
        h.to_csv(GLOBAL_HIST, mode='a', header=not os.path.exists(GLOBAL_HIST))
        return result
    return wrapper


def farm_options(func):
    @click.option("--mem")
    @click.option("--ncores")
    @click.option("--nprocs")
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        return func(*args, **kwargs)
    return wrapper


@click.group()
def cli():
    """
    Command line suite for HaniffaLab
    version 1.0.0
    """
    pass


@cli.group()
@hist
def irods():
    """
    Set of commands for interacting with irods
    Please note that you have `iinit` before running these commands
    """
    pass


@cli.group()
@hist
def test():
    """
    testing for development.
    this will be group name.
    """
    pass

@cli.group()
@hist
def rna():
    """
    Set of commands for analysing scRNA-seq data including:
    alignment, demultiplexing, removal of ambient RNA & doublets.
    """
    pass

@cli.group()
@hist
def alignment():
    """
    Set of commands for seq data alignment.
    """
    pass

################ irods commands ################
irods.add_command(cmdbase.irods.pull_processed)
irods.add_command(cmdbase.irods.pull_fastqs)

################### scrna seq analysis commands ###################
rna.add_command(cmdbase.rna.cellbender)

################# alignment commands ###################
alignment.add_command(cmdbase.alignment.cellranger)
alignment.add_command(cmdbase.alignment.starsolo)

############### test commands ###################



if __name__ == "__main__":
    RUN_TOKEN = helpers.generate_random_name() # Create a random id whenever the script is invoked. For history registration
    CWD = helpers.create_env()
    cli()
